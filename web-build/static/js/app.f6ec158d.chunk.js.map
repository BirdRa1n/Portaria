{"version":3,"sources":["Screens/Login.js","Screens/Dashboard.js","App.js"],"names":["Login","navigation","React","useState","formData","setData","storeData","value","a","async","jsonValue","JSON","stringify","AsyncStorage","setItem","console","log","NativeBaseProvider","View","w","h","bg","KeyboardAvoidingView","Center","Box","maxW","maxH","borderRadius","top","Image","source","uri","alt","size","Heading","Text","fontSize","safeArea","p","py","fontWeight","color","_dark","mt","VStack","space","FormControl","isInvalid","IDState","Label","HStack","ErrorMessage","leftIcon","WarningOutline","Input","onChangeText","id_code","PasswordState","type","password","Link","_text","alignSelf","Button","colorScheme","onPress","axios","get","params","method","then","response","responseRequest","data","undefined","warning_error","token_session","navigate","justifyContent","href","MaterialCommunityIcons","name","Dashboard","dataScreen","setdataScreen","dataUser","setdataUser","showModal","setShowModal","useEffect","filter","HallList","getItem","parse","getData","Modal","isOpen","onClose","Content","maxWidth","Body","ModalHall","ModalDescription","Footer","Group","variant","marginLeft","description","FlatList","numColumns","columnWrapperStyle","flex","marginBottom","showsVerticalScrollIndicator","renderItem","item","TouchableOpacity","hall","status","conveyer","ModalStatus","ModalCoveyer","alignItems","shadow","keyExtractor","id","Stack","createNativeStackNavigator","Tab","createBottomTabNavigator","prefix","Linking","TabNavigator","Navigator","screenOptions","route","tabBarIcon","iconName","focused","Ionicons","tabBarActiveTintColor","tabBarInactiveTintColor","Screen","component","options","headerShown","headerTitle","App","linking","prefixes","NavigationContainer","initialRouteName"],"mappings":"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","file":"static/js/app.f6ec158d.chunk.js","sourcesContent":["import { VStack } from \"native-base\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Box,\n  NativeBaseProvider,\n  Center,\n  Image,\n  Heading,\n  Text,\n  KeyboardAvoidingView,\n  HStack,\n  FormControl,\n  Input,\n  Link,\n  Button,\n  WarningOutlineIcon,\n} from \"native-base\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport axios from \"axios\";\n\nexport default function Login({ navigation }) {\n  const [formData, setData] = React.useState({});\n\n  function LoginNormalMethod() {\n    axios\n      .get(\"https://birdra1n.x10.bz/IFPI_PORTARIA/api/user/login/\", {\n        params: {\n          method: \"normal\",\n          id_code: formData.id_code,\n          password: formData.password,\n        },\n      })\n      .then(function (response) {\n        let responseRequest = response.data;\n        storeData(response.data);\n        if (\n          (responseRequest.warning_error != undefined) &\n          (responseRequest.warning_error == \"user does not exist\")\n        ) {\n          setData({\n            ...formData,\n            IDState: true,\n            PasswordState: false,\n          });\n        }\n\n        if (\n          (responseRequest.warning_error != undefined) &\n          (responseRequest.warning_error == \"incorrect password\")\n        ) {\n          setData({\n            ...formData,\n            PasswordState: true,\n            IDState: false,\n          });\n        }\n        if (response.data.token_session !== undefined) {\n          setData({\n            ...formData,\n            PasswordState: false,\n            IDState: false,\n          });\n\n          navigation.navigate(\"Dashboard\");\n        }\n      });\n  }\n  const storeData = async (value) => {\n    try {\n      const jsonValue = JSON.stringify(value);\n      await AsyncStorage.setItem(\"@data_user\", jsonValue);\n    } catch (e) {\n      console.log(\"erro ao efetuar o estado \" + e);\n    }\n  };\n\n  return (\n    <NativeBaseProvider>\n      <View w={\"100%\"} h={\"100%\"} bg={\"#fff\"}>\n        <KeyboardAvoidingView>\n          <Center>\n            <Box\n              w={\"90%\"}\n              maxW={400}\n              h={\"91%\"}\n              maxH={\"900\"}\n              bg={\"light.100\"}\n              borderRadius={10}\n              top={5}\n            >\n              <Center>\n                <Image\n                  top={5}\n                  source={{\n                    uri: \"https://pbs.twimg.com/profile_images/438771627854024704/Az4OY07a_400x400.png\",\n                  }}\n                  alt=\"Alternate Text\"\n                  size=\"sm\"\n                />\n              </Center>\n              <Center top={5}>\n                <Heading size={\"sm\"}>INSTITUTO</Heading>\n                <Heading size={\"sm\"}>FEDERAL</Heading>\n                <Text fontSize={\"xl\"}>Piauí</Text>\n              </Center>\n\n              <Center w=\"100%\">\n                <Box safeArea p=\"2\" py=\"8\" w=\"90%\" maxW=\"290\">\n                  <Heading\n                    size=\"lg\"\n                    fontWeight=\"600\"\n                    color=\"coolGray.800\"\n                    _dark={{\n                      color: \"warmGray.50\",\n                    }}\n                  >\n                    Bem vindo de volta\n                  </Heading>\n                  <Heading\n                    mt=\"1\"\n                    _dark={{\n                      color: \"warmGray.200\",\n                    }}\n                    color=\"coolGray.600\"\n                    fontWeight=\"medium\"\n                    size=\"xs\"\n                  >\n                    faça login para continuar!\n                  </Heading>\n\n                  <VStack space={3} mt=\"5\">\n                    <FormControl isInvalid={formData.IDState}>\n                      <FormControl.Label>\n                        <HStack space={2}>\n                          <FormControl.Label>ID</FormControl.Label>\n                          <FormControl.ErrorMessage\n                            top={-1.2}\n                            leftIcon={<WarningOutlineIcon size=\"xs\" />}\n                          >\n                            Usuário não encontrado\n                          </FormControl.ErrorMessage>\n                        </HStack>\n                      </FormControl.Label>\n                      <Input\n                        onChangeText={(value) =>\n                          setData({\n                            ...formData,\n                            id_code: value,\n                          })\n                        }\n                      />\n                    </FormControl>\n                    <FormControl isInvalid={formData.PasswordState}>\n                      <FormControl.Label>\n                        <HStack space={2}>\n                          <FormControl.Label>Senha</FormControl.Label>\n                          <FormControl.ErrorMessage\n                            top={-1.2}\n                            leftIcon={<WarningOutlineIcon size=\"xs\" />}\n                          >\n                            Senha incorreta\n                          </FormControl.ErrorMessage>\n                        </HStack>\n                      </FormControl.Label>\n\n                      <Input\n                        type=\"password\"\n                        onChangeText={(value) =>\n                          setData({\n                            ...formData,\n                            password: value,\n                          })\n                        }\n                      />\n\n                      <Link\n                        _text={{\n                          fontSize: \"xs\",\n                          fontWeight: \"500\",\n                          color: \"success.500\",\n                        }}\n                        alignSelf=\"flex-end\"\n                        mt=\"1\"\n                      >\n                        Esqueceu a senha?\n                      </Link>\n                    </FormControl>\n                    <Button\n                      mt=\"2\"\n                      colorScheme=\"success\"\n                      onPress={() => LoginNormalMethod()}\n                    >\n                      Entrar\n                    </Button>\n                    <HStack mt=\"6\" justifyContent=\"center\">\n                      <Text\n                        fontSize=\"sm\"\n                        color=\"coolGray.600\"\n                        _dark={{\n                          color: \"warmGray.200\",\n                        }}\n                      >\n                        Veja o projeto no{\" \"}\n                      </Text>\n                      <Link\n                        _text={{\n                          color: \"success.500\",\n                          fontWeight: \"medium\",\n                          fontSize: \"sm\",\n                        }}\n                        href=\"#\"\n                      >\n                        GitHub\n                      </Link>\n                    </HStack>\n                    <Center>\n                      <Button\n                        colorScheme={\"success\"}\n                        leftIcon={\n                          <MaterialCommunityIcons\n                            name=\"qrcode-scan\"\n                            size={24}\n                            color=\"black\"\n                          />\n                        }\n                      >\n                        Entre com QRCode\n                      </Button>\n                    </Center>\n                  </VStack>\n                </Box>\n              </Center>\n            </Box>\n          </Center>\n        </KeyboardAvoidingView>\n      </View>\n    </NativeBaseProvider>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Box,\n  NativeBaseProvider,\n  Center,\n  Button,\n  Text,\n  FlatList,\n  HStack,\n  VStack,\n  Heading,\n  Image,\n  Modal,\n} from \"native-base\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport axios from \"axios\";\nimport { TouchableOpacity } from \"react-native\";\n\nexport default function Dashboard({ navigation }) {\n  const [dataScreen, setdataScreen] = React.useState({});\n  const [dataUser, setdataUser] = React.useState({});\n  const [showModal, setShowModal] = useState(false);\n\n  function getKeys() {\n    axios\n      .get(\"https://birdra1n.x10.bz/IFPI_PORTARIA/api/keys/list\", {\n        params: {\n          filter: \"all\",\n        },\n      })\n      .then(function (response) {\n        console.log(response);\n        setdataScreen({\n          ...dataScreen,\n          HallList: response.data,\n        });\n      });\n  }\n  const getData = async () => {\n    try {\n      const jsonValue = await AsyncStorage.getItem(\"@data_user\");\n      setdataUser(JSON.parse(jsonValue));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    getKeys();\n    getData();\n  }, []);\n\n  function ModalRequestKey(hall, description, status, conveyer) {\n    setShowModal(true)\n    setdataScreen({\n      ...dataScreen,\n      ModalHall: hall,\n      ModalDescription: description,\n      ModalStatus: status,\n      ModalCoveyer: conveyer\n    });\n\n  }\n\n  return (\n    <NativeBaseProvider>\n      <Center>\n        <Modal isOpen={showModal} onClose={() => setShowModal(false)}>\n          <Modal.Content maxWidth=\"400px\">\n            <Modal.Body>\n              <Heading fontSize={15}>\n              Deseja solicitar a chave da sala {dataScreen.ModalHall}?\n              </Heading>\n              <Text  fontSize={\"md\"}>\n                  {dataScreen.ModalDescription}\n                </Text>\n\n            </Modal.Body>\n            <Modal.Footer>\n              <Button.Group space={2}>\n                <Button\n                  variant=\"ghost\"\n                  colorScheme=\"blueGray\"\n                  onPress={() => {\n                    setShowModal(false);\n                  }}\n                >\n                  Não\n                </Button>\n                <Button\n                  colorScheme={\"success\"}\n                  onPress={() => {\n                    setShowModal(false);\n                  }}\n                >\n                  Sim\n                </Button>\n              </Button.Group>\n            </Modal.Footer>\n          </Modal.Content>\n        </Modal>\n      </Center>\n\n      <Box w={\"100%\"} bg={\"#FBFBFB\"} maxW={500} h={\"100%\"}>\n        <Box p={2} safeArea>\n          <HStack>\n            <Image\n              source={{\n                uri: \"https://pbs.twimg.com/profile_images/438771627854024704/Az4OY07a_400x400.png\",\n              }}\n              alt=\"Alternate Text\"\n              size=\"sm\"\n            />\n            <View marginLeft={\"2%\"}>\n              <Heading size={\"sm\"}>{dataUser.name}</Heading>\n              <Text fontSize={10}>{dataUser.description}</Text>\n              <Text fontSize={10} top={2}>\n                INSTITUTO FEDERAL CAMPUS PEDRO II\n              </Text>\n            </View>\n          </HStack>\n        </Box>\n        <Center top={5}>\n          <FlatList\n            w={\"95%\"}\n            maxW={350}\n            h={\"80%\"}\n            numColumns={3}\n            columnWrapperStyle={{\n              flex: 1,\n              justifyContent: \"space-around\",\n              marginLeft: 5,\n              marginBottom: 5,\n            }}\n            showsVerticalScrollIndicator={false}\n            data={dataScreen.HallList}\n            renderItem={({ item }) => (\n              <TouchableOpacity\n                onPress={() =>\n                  ModalRequestKey(\n                    item.hall,\n                    item.description,\n                    item.status,\n                    item.conveyer\n                  )\n                }\n              >\n                <Box\n                  marginBottom={1}\n                  alignItems={\"center\"}\n                  bg={\"light.50\"}\n                  borderRadius={5}\n                  w={16}\n                  h={59}\n                  p={1}\n                  shadow={1}\n                >\n                  <HStack>\n                    <VStack>\n                      <Heading size={\"sm\"}>Sala</Heading>\n                      <Heading>{item.hall}</Heading>\n                    </VStack>\n                  </HStack>\n                </Box>\n              </TouchableOpacity>\n            )}\n            keyExtractor={(item) => item.id}\n          />\n        </Center>\n      </Box>\n    </NativeBaseProvider>\n  );\n}\n","import * as Linking from \"expo-linking\";\nimport React, { useState, useEffect } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { SSRProvider } from '@react-aria/ssr';\n\nimport Ionicons from 'react-native-vector-icons/Ionicons';\n\n//Screens\nimport Login from \"./Screens/Login\";\nimport Dashboard from \"./Screens/Dashboard\";\n\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\nconst prefix = Linking.createURL(\"/\");\n\nfunction TabNavigator(){\n  return(\n    <Tab.Navigator\n    screenOptions={({ route }) => ({\n      tabBarIcon: ({ focused, color, size }) => {\n        let iconName;\n\n        if (route.name === 'Chaves') {\n          iconName = focused\n            ? 'ios-home-outline'\n            : 'ios-home-sharp';\n        } else if (route.name === 'Solicitações') {\n          iconName = focused ? 'reorder-three-sharp' : 'reorder-three-sharp';\n        } else if (route.name === 'Conta') {\n          iconName = focused ? 'person-circle-outline' : 'person-circle';\n        }\n        return <Ionicons name={iconName} size={size} color={color} />;\n      },\n      tabBarActiveTintColor: 'green',\n      tabBarInactiveTintColor: 'black',\n    })}\n  >\n    <Tab.Screen name=\"Chaves\" component={Dashboard} options={{ headerShown: false, headerTitle: 'Portaria' }} />\n  </Tab.Navigator>\n  )\n}\n\n\n\n\nexport default function App() {\n  const linking = {\n    prefixes: [prefix],\n  };\n  return (\n    <SSRProvider>\n      <NavigationContainer linking={linking} >\n        <Stack.Navigator screenOptions={{ headerShown: false }} initialRouteName={\"Login\"}>\n          <Stack.Screen name=\"Login\" component={Login} />\n          <Stack.Screen name=\"Dashboard\" component={TabNavigator} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </SSRProvider>\n  );\n}\n"],"sourceRoot":""}