{"version":3,"sources":["Screens/Login.js","Screens/Dashboard.js","App.js"],"names":["Login","navigation","React","useState","formData","setData","storeData","value","a","async","jsonValue","JSON","stringify","AsyncStorage","setItem","console","log","NativeBaseProvider","View","w","h","bg","KeyboardAvoidingView","Center","Box","maxW","maxH","borderRadius","top","Image","source","uri","alt","size","Heading","Text","fontSize","safeArea","p","py","fontWeight","color","_dark","mt","VStack","space","FormControl","isInvalid","IDState","Label","HStack","ErrorMessage","leftIcon","WarningOutline","Input","onChangeText","id_code","PasswordState","type","password","Link","_text","alignSelf","Button","colorScheme","onPress","axios","get","params","method","then","response","responseRequest","data","undefined","warning_error","token_session","navigate","justifyContent","href","MaterialCommunityIcons","name","Dashboard","dataScreen","setdataScreen","dataUser","setdataUser","setShow","useDisclose","isOpen","onOpen","onClose","useEffect","filter","HallList","getItem","parse","getData","marginLeft","description","FlatList","numColumns","columnWrapperStyle","flex","marginBottom","showsVerticalScrollIndicator","renderItem","item","TouchableOpacity","hall","status","conveyer","alignItems","shadow","keyExtractor","id","Actionsheet","Content","px","Item","RequestKey","signature_digital","Stack","createNativeStackNavigator","Tab","createBottomTabNavigator","prefix","Linking","TabNavigator","Navigator","screenOptions","route","tabBarIcon","iconName","focused","Ionicons","tabBarActiveTintColor","tabBarInactiveTintColor","Screen","component","options","headerShown","headerTitle","App","linking","prefixes","NavigationContainer","initialRouteName"],"mappings":"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","file":"static/js/app.6e4ac9cc.chunk.js","sourcesContent":["import { VStack } from \"native-base\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Box,\n  NativeBaseProvider,\n  Center,\n  Image,\n  Heading,\n  Text,\n  KeyboardAvoidingView,\n  HStack,\n  FormControl,\n  Input,\n  Link,\n  Button,\n  WarningOutlineIcon,\n} from \"native-base\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport axios from \"axios\";\n\nexport default function Login({ navigation }) {\n  const [formData, setData] = React.useState({});\n\n  function LoginNormalMethod() {\n    axios\n      .get(\"https://birdra1n.x10.bz/IFPI_PORTARIA/api/user/login/\", {\n        params: {\n          method: \"normal\",\n          id_code: formData.id_code,\n          password: formData.password,\n        },\n      })\n      .then(function (response) {\n        let responseRequest = response.data;\n        storeData(response.data);\n        if (\n          (responseRequest.warning_error != undefined) &\n          (responseRequest.warning_error == \"user does not exist\")\n        ) {\n          setData({\n            ...formData,\n            IDState: true,\n            PasswordState: false,\n          });\n        }\n\n        if (\n          (responseRequest.warning_error != undefined) &\n          (responseRequest.warning_error == \"incorrect password\")\n        ) {\n          setData({\n            ...formData,\n            PasswordState: true,\n            IDState: false,\n          });\n        }\n        if (response.data.token_session !== undefined) {\n          setData({\n            ...formData,\n            PasswordState: false,\n            IDState: false,\n          });\n\n          navigation.navigate(\"Dashboard\");\n        }\n      });\n  }\n  const storeData = async (value) => {\n    try {\n      const jsonValue = JSON.stringify(value);\n      await AsyncStorage.setItem(\"@data_user\", jsonValue);\n    } catch (e) {\n      console.log(\"erro ao efetuar o estado \" + e);\n    }\n  };\n\n  return (\n    <NativeBaseProvider>\n      <View w={\"100%\"} h={\"100%\"} bg={\"#fff\"}>\n        <KeyboardAvoidingView>\n          <Center>\n            <Box\n              w={\"90%\"}\n              maxW={400}\n              h={\"91%\"}\n              maxH={\"900\"}\n              bg={\"light.100\"}\n              borderRadius={10}\n              top={5}\n            >\n              <Center>\n                <Image\n                  top={5}\n                  source={{\n                    uri: \"https://pbs.twimg.com/profile_images/438771627854024704/Az4OY07a_400x400.png\",\n                  }}\n                  alt=\"Alternate Text\"\n                  size=\"sm\"\n                />\n              </Center>\n              <Center top={5}>\n                <Heading size={\"sm\"}>INSTITUTO</Heading>\n                <Heading size={\"sm\"}>FEDERAL</Heading>\n                <Text fontSize={\"xl\"}>Piauí</Text>\n              </Center>\n\n              <Center w=\"100%\">\n                <Box safeArea p=\"2\" py=\"8\" w=\"90%\" maxW=\"290\">\n                  <Heading\n                    size=\"lg\"\n                    fontWeight=\"600\"\n                    color=\"coolGray.800\"\n                    _dark={{\n                      color: \"warmGray.50\",\n                    }}\n                  >\n                    Bem vindo de volta\n                  </Heading>\n                  <Heading\n                    mt=\"1\"\n                    _dark={{\n                      color: \"warmGray.200\",\n                    }}\n                    color=\"coolGray.600\"\n                    fontWeight=\"medium\"\n                    size=\"xs\"\n                  >\n                    faça login para continuar!\n                  </Heading>\n\n                  <VStack space={3} mt=\"5\">\n                    <FormControl isInvalid={formData.IDState}>\n                      <FormControl.Label>\n                        <HStack space={2}>\n                          <FormControl.Label>ID</FormControl.Label>\n                          <FormControl.ErrorMessage\n                            top={-1.2}\n                            leftIcon={<WarningOutlineIcon size=\"xs\" />}\n                          >\n                            Usuário não encontrado\n                          </FormControl.ErrorMessage>\n                        </HStack>\n                      </FormControl.Label>\n                      <Input\n                        onChangeText={(value) =>\n                          setData({\n                            ...formData,\n                            id_code: value,\n                          })\n                        }\n                      />\n                    </FormControl>\n                    <FormControl isInvalid={formData.PasswordState}>\n                      <FormControl.Label>\n                        <HStack space={2}>\n                          <FormControl.Label>Senha</FormControl.Label>\n                          <FormControl.ErrorMessage\n                            top={-1.2}\n                            leftIcon={<WarningOutlineIcon size=\"xs\" />}\n                          >\n                            Senha incorreta\n                          </FormControl.ErrorMessage>\n                        </HStack>\n                      </FormControl.Label>\n\n                      <Input\n                        type=\"password\"\n                        onChangeText={(value) =>\n                          setData({\n                            ...formData,\n                            password: value,\n                          })\n                        }\n                      />\n\n                      <Link\n                        _text={{\n                          fontSize: \"xs\",\n                          fontWeight: \"500\",\n                          color: \"success.500\",\n                        }}\n                        alignSelf=\"flex-end\"\n                        mt=\"1\"\n                      >\n                        Esqueceu a senha?\n                      </Link>\n                    </FormControl>\n                    <Button\n                      mt=\"2\"\n                      colorScheme=\"success\"\n                      onPress={() => LoginNormalMethod()}\n                    >\n                      Entrar\n                    </Button>\n                    <HStack mt=\"6\" justifyContent=\"center\">\n                      <Text\n                        fontSize=\"sm\"\n                        color=\"coolGray.600\"\n                        _dark={{\n                          color: \"warmGray.200\",\n                        }}\n                      >\n                        Veja o projeto no{\" \"}\n                      </Text>\n                      <Link\n                        _text={{\n                          color: \"success.500\",\n                          fontWeight: \"medium\",\n                          fontSize: \"sm\",\n                        }}\n                        href=\"#\"\n                      >\n                        GitHub\n                      </Link>\n                    </HStack>\n                    <Center>\n                      <Button\n                        colorScheme={\"success\"}\n                        leftIcon={\n                          <MaterialCommunityIcons\n                            name=\"qrcode-scan\"\n                            size={24}\n                            color=\"black\"\n                          />\n                        }\n                      >\n                        Entre com QRCode\n                      </Button>\n                    </Center>\n                  </VStack>\n                </Box>\n              </Center>\n            </Box>\n          </Center>\n        </KeyboardAvoidingView>\n      </View>\n    </NativeBaseProvider>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Box,\n  NativeBaseProvider,\n  useDisclose,\n  Center,\n  Button,\n  Actionsheet,\n  Text,\n  FlatList,\n  HStack,\n  VStack,\n  Heading,\n  Image,\n} from \"native-base\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport axios from \"axios\";\nimport { TouchableOpacity } from \"react-native\";\n\nexport default function Dashboard({ navigation }) {\n  const [dataScreen, setdataScreen] = React.useState({});\n  const [dataUser, setdataUser] = React.useState({});\n  const [show, setShow] = React.useState(false);\n  const { isOpen, onOpen, onClose } = useDisclose();\n\n  function getKeys() {\n    axios\n      .get(\"https://birdra1n.x10.bz/IFPI_PORTARIA/api/keys/list\", {\n        params: {\n          filter: \"all\",\n        },\n      })\n      .then(function (response) {\n        console.log(response);\n        setdataScreen({\n          ...dataScreen,\n          HallList: response.data,\n        });\n      });\n  }\n  const getData = async () => {\n    try {\n      const jsonValue = await AsyncStorage.getItem(\"@data_user\");\n      setdataUser(JSON.parse(jsonValue));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    getKeys();\n    getData();\n  }, []);\n\n  function ActionSheetRequestKey(hall, description, status, conveyer) {\n    setShow(false);\n    onOpen();\n    const info = {\n      hall: hall,\n      description: description,\n      status: status,\n      conveyer,\n      conveyer,\n    };\n    setdataScreen({\n      ...dataScreen,\n      hall: hall,\n      description: description,\n      status: status,\n      conveyer,\n      conveyer,\n    });\n  }\n\n  function Example() {\n    const { isOpen, onOpen, onClose } = useDisclose();\n    return (\n      <Center top={120}>\n        <Button onPress={onOpen}>Actionsheet</Button>\n        <Actionsheet isOpen={isOpen} onClose={onClose}>\n          <Actionsheet.Content>\n            <Box w=\"100%\" h={60} px={4} justifyContent=\"center\">\n              <Text\n                fontSize=\"16\"\n                color=\"gray.500\"\n                _dark={{\n                  color: \"gray.300\",\n                }}\n              >\n                Albums\n              </Text>\n            </Box>\n            <Actionsheet.Item>Delete</Actionsheet.Item>\n            <Actionsheet.Item>Share</Actionsheet.Item>\n            <Actionsheet.Item>Play</Actionsheet.Item>\n            <Actionsheet.Item>Favourite</Actionsheet.Item>\n            <Actionsheet.Item>Cancel</Actionsheet.Item>\n          </Actionsheet.Content>\n        </Actionsheet>\n      </Center>\n    );\n  }\n\n  return (\n    <NativeBaseProvider>\n      \n        <Box w={\"100%\"} bg={\"#FBFBFB\"} maxW={500} h={'100%'}>\n          <Box p={2} safeArea>\n            <HStack>\n              <Image\n                source={{\n                  uri: \"https://pbs.twimg.com/profile_images/438771627854024704/Az4OY07a_400x400.png\",\n                }}\n                alt=\"Alternate Text\"\n                size=\"sm\"\n              />\n              <View marginLeft={\"2%\"}>\n                <Heading size={\"sm\"}>{dataUser.name}</Heading>\n                <Text fontSize={10}>{dataUser.description}</Text>\n                <Text fontSize={10} top={2}>\n                  INSTITUTO FEDERAL CAMPUS PEDRO II\n                </Text>\n              </View>\n            </HStack>\n          </Box>\n          <Center top={5}>\n            <FlatList\n              w={\"95%\"}\n              maxW={350}\n              h={\"80%\"}\n              numColumns={3}\n              columnWrapperStyle={{\n                flex: 1,\n                justifyContent: \"space-around\",\n                marginLeft: 5,\n                marginBottom: 5,\n              }}\n              showsVerticalScrollIndicator={false}\n              data={dataScreen.HallList}\n              renderItem={({ item }) => (\n                <TouchableOpacity\n                  onPress={() =>\n                    ActionSheetRequestKey(\n                      item.hall,\n                      item.description,\n                      item.status,\n                      item.conveyer\n                    )\n                  }\n                >\n                  <Box\n                    marginBottom={1}\n                    alignItems={\"center\"}\n                    bg={\"light.50\"}\n                    borderRadius={5}\n                    w={16}\n                    h={59}\n                    p={1}\n                    shadow={1}\n                  >\n                    <HStack>\n                      <VStack>\n                        <Heading size={\"sm\"}>Sala</Heading>\n                        <Heading>{item.hall}</Heading>\n                      </VStack>\n                    </HStack>\n                  </Box>\n                </TouchableOpacity>\n              )}\n              keyExtractor={(item) => item.id}\n            />\n          </Center>\n\n        </Box>\n        <Actionsheet isOpen={isOpen} onClose={onClose}>\n            <Center>\n              <Example />\n            </Center>\n            <Actionsheet.Content>\n              <HStack w={\"100%\"} top={-10}>\n                <View w={\"81%\"}></View>\n                <TouchableOpacity onPress={onClose}>\n                  <Heading size={\"sm\"}>Fechar</Heading>\n                </TouchableOpacity>\n              </HStack>\n\n              <Box w=\"100%\" px={4} justifyContent=\"center\">\n                <Heading fontSize={18}>\n                  Deseja solicitar a chave da sala {dataScreen.hall}?\n                </Heading>\n                <Text marginBottom={21} fontSize={\"md\"}>\n                  {dataScreen.description}\n                </Text>\n                <Center marginBottom={50}>\n                  <HStack space={2}>\n                    <Button\n                      onPress={() =>\n                        RequestKey(\n                          dataScreen.signature_digital,\n                          dataScreen.hall\n                        )\n                      }\n                      w={120}\n                      bg={\"green.700\"}\n                      colorScheme={\"green\"}\n                    >\n                      Sim\n                    </Button>\n                    <Button\n                      onPress={() => onClose(false)}\n                      w={120}\n                      bg={\"white\"}\n                      shadow={1}\n                      _text={{ color: \"black\" }}\n                      colorScheme={\"red\"}\n                    >\n                      Não\n                    </Button>\n                  </HStack>\n                </Center>\n              </Box>\n            </Actionsheet.Content>\n          </Actionsheet>\n\n    </NativeBaseProvider>\n  );\n}\n","import * as Linking from \"expo-linking\";\nimport React, { useState, useEffect } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { SSRProvider } from '@react-aria/ssr';\n\nimport Ionicons from 'react-native-vector-icons/Ionicons';\n\n//Screens\nimport Login from \"./Screens/Login\";\nimport Dashboard from \"./Screens/Dashboard\";\n\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\nconst prefix = Linking.createURL(\"/\");\n\nfunction TabNavigator(){\n  return(\n    <Tab.Navigator\n    screenOptions={({ route }) => ({\n      tabBarIcon: ({ focused, color, size }) => {\n        let iconName;\n\n        if (route.name === 'Chaves') {\n          iconName = focused\n            ? 'ios-home-outline'\n            : 'ios-home-sharp';\n        } else if (route.name === 'Solicitações') {\n          iconName = focused ? 'reorder-three-sharp' : 'reorder-three-sharp';\n        } else if (route.name === 'Conta') {\n          iconName = focused ? 'person-circle-outline' : 'person-circle';\n        }\n        return <Ionicons name={iconName} size={size} color={color} />;\n      },\n      tabBarActiveTintColor: 'green',\n      tabBarInactiveTintColor: 'black',\n    })}\n  >\n    <Tab.Screen name=\"Chaves\" component={Dashboard} options={{ headerShown: false, headerTitle: 'Portaria' }} />\n  </Tab.Navigator>\n  )\n}\n\n\n\n\nexport default function App() {\n  const linking = {\n    prefixes: [prefix],\n  };\n  return (\n    <SSRProvider>\n      <NavigationContainer linking={linking} >\n        <Stack.Navigator screenOptions={{ headerShown: false }} initialRouteName={\"Login\"}>\n          <Stack.Screen name=\"Login\" component={Login} />\n          <Stack.Screen name=\"Dashboard\" component={TabNavigator} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </SSRProvider>\n  );\n}\n"],"sourceRoot":""}