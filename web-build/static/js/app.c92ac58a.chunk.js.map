{"version":3,"sources":["Screens/Login.js","Screens/Dashboard.js","Screens/Dashboard/Requests.js","Screens/Dashboard/Account.js","Screens/LoginQR.js","App.js"],"names":["Login","navigation","React","useState","formData","setData","storeData","value","a","async","jsonValue","JSON","stringify","AsyncStorage","setItem","console","log","useEffect","Platform","OS","stateQRButton","NativeBaseProvider","View","w","h","bg","ScrollView","Center","Box","maxW","maxH","borderRadius","top","KeyboardAvoidingView","base","lg","behavior","Image","source","uri","alt","size","Heading","Text","fontSize","safeArea","p","py","fontWeight","color","_dark","mt","VStack","space","_android","_ios","FormControl","isInvalid","IDState","Label","HStack","ErrorMessage","leftIcon","WarningOutline","Input","onChangeText","id_code","PasswordState","type","password","Link","_text","alignSelf","Button","colorScheme","onPress","axios","get","params","method","then","response","responseRequest","data","undefined","warning_error","token_session","navigate","justifyContent","href","isDisabled","MaterialCommunityIcons","name","Dashboard","dataScreen","setdataScreen","dataUser","setdataUser","showModal","setShowModal","filter","HallList","getItem","parse","getData","Modal","isOpen","onClose","Content","maxWidth","Body","marginBottom","ModalHall","ModalDescription","Footer","Group","variant","signature_digital","hall","dataRequest","alert","code_request","success","marginLeft","description","FlatList","numColumns","columnWrapperStyle","flex","showsVerticalScrollIndicator","renderItem","item","TouchableOpacity","status","conveyer","ModalStatus","ModalCoveyer","marginTop","alignItems","shadow","keyExtractor","id","Requests","Account","LoginQR","setHasPermission","scanned","setScanned","BarCodeScanner","requestPermissionsAsync","style","styles","container","box","onBarCodeScanned","dataqr","QRtoken","QRData","StyleSheet","absoluteFillObject","create","flexDirection","alignContent","width","height","Stack","createNativeStackNavigator","Tab","createBottomTabNavigator","TabNavigator","Navigator","screenOptions","route","tabBarIcon","iconName","focused","Ionicons","tabBarActiveTintColor","tabBarInactiveTintColor","Screen","component","options","headerShown","headerTitle","App","NavigationContainer","initialRouteName"],"mappings":"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","file":"static/js/app.c92ac58a.chunk.js","sourcesContent":["import { VStack } from \"native-base\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Box,\n  NativeBaseProvider,\n  Center,\n  Image,\n  Heading,\n  Text,\n  KeyboardAvoidingView,\n  HStack,\n  FormControl,\n  Input,\n  Link,\n  Button,\n  WarningOutlineIcon,\n  ScrollView,\n} from \"native-base\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport axios from \"axios\";\nimport { Platform } from \"react-native\";\n\nexport default function Login({ navigation }) {\n  const [formData, setData] = React.useState({});\n\n  function LoginNormalMethod() {\n    axios\n      .get(\"https://birdra1n.x10.bz/IFPI_PORTARIA/api/user/login/\", {\n        params: {\n          method: \"normal\",\n          id_code: formData.id_code,\n          password: formData.password,\n        },\n      })\n      .then(function (response) {\n        let responseRequest = response.data;\n        storeData(response.data);\n        if (\n          (responseRequest.warning_error != undefined) &\n          (responseRequest.warning_error == \"user does not exist\")\n        ) {\n          setData({\n            ...formData,\n            IDState: true,\n            PasswordState: false,\n          });\n        }\n\n        if (\n          (responseRequest.warning_error != undefined) &\n          (responseRequest.warning_error == \"incorrect password\")\n        ) {\n          setData({\n            ...formData,\n            PasswordState: true,\n            IDState: false,\n          });\n        }\n        if (response.data.token_session !== undefined) {\n          setData({\n            ...formData,\n            PasswordState: false,\n            IDState: false,\n          });\n\n          navigation.navigate(\"Dashboard\");\n          console.log(\"Login realizado com sucesso!\")\n        }\n      });\n  }\n  const storeData = async (value) => {\n    try {\n      const jsonValue = JSON.stringify(value);\n      await AsyncStorage.setItem(\"@data_user\", jsonValue);\n    } catch (e) {\n      console.log(\"erro ao efetuar o estado \" + e);\n    }\n  };\n\n  function checkPlataform(){\n    if(Platform.OS == \"web\"){\n      console.log(\"Plataform is Web\")\n      setData({\n        ...formData,\n        stateQRButton: true\n      })\n    }else{\n      console.log(\"Plataform is !web\")\n      setData({\n        ...formData,\n        stateQRButton: false\n      })\n    }\n  }\n\n  useEffect(() => {\n    checkPlataform()\n  }, []);\n\n  return (\n    <NativeBaseProvider>\n      <View w={\"100%\"} h={\"100%\"} bg={\"#fff\"}>\n        <ScrollView bg={\"#fff\"}>\n          <Center>\n            <Box\n              w={\"90%\"}\n              maxW={390}\n              h={\"91%\"}\n              maxH={900}\n              bg={\"light.100\"}\n              borderRadius={10}\n              top={5}\n            >\n              <KeyboardAvoidingView\n                h={{\n                  base: \"100%\",\n                  lg: \"auto\",\n                }}\n                maxH={{\n                  base: \"450px\",\n                  lg: \"auto\",\n                }}\n                behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\" && Platform.OS === \"android\" ? \"padding\" : \"height\"}\n              >\n                <Center>\n                  <Image\n                    top={5}\n                    source={{\n                      uri: \"https://pbs.twimg.com/profile_images/438771627854024704/Az4OY07a_400x400.png\",\n                    }}\n                    alt=\"Alternate Text\"\n                    size=\"sm\"\n                  />\n                </Center>\n\n                <Center top={5}>\n                  <Heading size={\"sm\"}>INSTITUTO</Heading>\n                  <Heading size={\"sm\"}>FEDERAL</Heading>\n                  <Text fontSize={\"xl\"}>Piauí</Text>\n                </Center>\n\n                <Center w=\"100%\">\n                  <Box safeArea p=\"2\" py=\"8\" w=\"90%\" maxW=\"290\">\n                    <Heading\n                      size=\"lg\"\n                      fontWeight=\"600\"\n                      color=\"coolGray.800\"\n                      _dark={{\n                        color: \"warmGray.50\",\n                      }}\n                    >\n                      Bem vindo de volta\n                    </Heading>\n                    <Heading\n                      mt=\"1\"\n                      _dark={{\n                        color: \"warmGray.200\",\n                      }}\n                      color=\"coolGray.600\"\n                      fontWeight=\"medium\"\n                      size=\"xs\"\n                    >\n                      faça login para continuar!\n                    </Heading>\n\n                    <VStack\n                      space={3}\n                      mt=\"5\"\n                      _android={{\n                        top: -10,\n                      }}\n                      _ios={{\n                        top: -15,\n                      }}\n                    >\n                      <FormControl isInvalid={formData.IDState}>\n                        <FormControl.Label>\n                          <HStack space={2}>\n                            <FormControl.Label>ID</FormControl.Label>\n                            <FormControl.ErrorMessage\n                              top={-2.5}\n                              leftIcon={<WarningOutlineIcon size=\"xs\" />}\n                            >\n                              Usuário não encontrado\n                            </FormControl.ErrorMessage>\n                          </HStack>\n                        </FormControl.Label>\n                        <Input\n                          onChangeText={(value) =>\n                            setData({\n                              ...formData,\n                              id_code: value,\n                            })\n                          }\n                        />\n                      </FormControl>\n                      <FormControl isInvalid={formData.PasswordState}>\n                        <FormControl.Label>\n                          <HStack space={2}>\n                            <FormControl.Label>Senha</FormControl.Label>\n                            <FormControl.ErrorMessage\n                              top={-2.5}\n                              leftIcon={<WarningOutlineIcon size=\"xs\" />}\n                            >\n                              Senha incorreta\n                            </FormControl.ErrorMessage>\n                          </HStack>\n                        </FormControl.Label>\n\n                        <Input\n                          type=\"password\"\n                          onChangeText={(value) =>\n                            setData({\n                              ...formData,\n                              password: value,\n                            })\n                          }\n                        />\n\n                        <Link\n                          _text={{\n                            fontSize: \"xs\",\n                            fontWeight: \"500\",\n                            color: \"success.500\",\n                          }}\n                          alignSelf=\"flex-end\"\n                          mt=\"1\"\n                        >\n                          Esqueceu a senha?\n                        </Link>\n                      </FormControl>\n                      <Button\n                        mt=\"2\"\n                        colorScheme=\"success\"\n                        onPress={() => LoginNormalMethod()}\n                      >\n                        Entrar\n                      </Button>\n                      <HStack mt=\"6\" justifyContent=\"center\">\n                        <Text\n                          fontSize=\"sm\"\n                          color=\"coolGray.600\"\n                          _dark={{\n                            color: \"warmGray.200\",\n                          }}\n                        >\n                          Veja o projeto no{\" \"}\n                        </Text>\n                        <Link\n                          _text={{\n                            color: \"success.500\",\n                            fontWeight: \"medium\",\n                            fontSize: \"sm\",\n                          }}\n                          href=\"https://github.com/BirdRa1n/SISTEMA-DE-PORTARIA-IFPI\"\n                        >\n                          GitHub\n                        </Link>\n                      </HStack>\n                      <Center>\n                        <Button\n                        isDisabled={formData.stateQRButton}\n                          colorScheme={\"success\"}\n                          onPress={()=>navigation.navigate(\"LoginQR\")}\n                          leftIcon={\n                            <MaterialCommunityIcons\n                              name=\"qrcode-scan\"\n                              size={24}\n                              color=\"black\"\n                            />\n                          }\n                        >\n                          Entre com QRCode\n                        </Button>\n                      </Center>\n                    </VStack>\n                  </Box>\n                </Center>\n              </KeyboardAvoidingView>\n            </Box>\n          </Center>\n        </ScrollView>\n      </View>\n    </NativeBaseProvider>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  Box,\n  NativeBaseProvider,\n  Center,\n  Button,\n  Text,\n  FlatList,\n  HStack,\n  VStack,\n  Heading,\n  Image,\n  Modal,\n} from \"native-base\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport axios from \"axios\";\nimport { TouchableOpacity } from \"react-native\";\n\nexport default function Dashboard({ navigation }) {\n  const [dataScreen, setdataScreen] = React.useState({});\n  const [dataUser, setdataUser] = React.useState({});\n  const [showModal, setShowModal] = useState(false);\n\n  function getKeys() {\n    axios\n      .get(\"https://birdra1n.x10.bz/IFPI_PORTARIA/api/keys/list\", {\n        params: {\n          filter: \"all\",\n        },\n      })\n      .then(function (response) {\n        console.log(response);\n        setdataScreen({\n          ...dataScreen,\n          HallList: response.data,\n        });\n      });\n  }\n  const getData = async () => {\n    try {\n      const jsonValue = await AsyncStorage.getItem(\"@data_user\");\n      setdataUser(JSON.parse(jsonValue));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    getKeys();\n    getData();\n  }, []);\n\n  function ModalRequestKey(hall, description, status, conveyer) {\n    setShowModal(true)\n    setdataScreen({\n      ...dataScreen,\n      ModalHall: hall,\n      ModalDescription: description,\n      ModalStatus: status,\n      ModalCoveyer: conveyer\n    });\n\n  }\n\n  function RequestKey(signature_digital, hall) {\n    axios\n      .get(\"https://birdra1n.x10.bz/IFPI_PORTARIA/api/keys/request\", {\n        params: {\n          signature_digital: signature_digital,\n          hall: hall,\n        },\n      })\n      .then(function (response) {\n        setShowModal(false);\n        console.log(response.data);\n        let dataRequest = response.data;\n        if(dataRequest.warning_error != undefined && \"Without permission\"){\n          alert('Você não possui autorização para solicitar essa chave')\n        }\n        if(dataRequest.code_request != undefined & dataRequest.success == \"successfully reserved key\"){\n          alert('Solicitação realizada com sucesso! \\n\\n'+\n          'Código da solicitação: '+dataRequest.code_request\n          )\n        }\n        if(dataRequest.warning_error == \"room is busy\"){\n          alert(\"A sala já está sendo usada\");\n        }\n      });\n  }\n\n  return (\n    <NativeBaseProvider>\n      <Center>\n        <Modal isOpen={showModal} onClose={() => setShowModal(false)}>\n          <Modal.Content w={'100%'} maxWidth=\"340px\">\n            <Modal.Body>\n              <Heading fontSize={17} marginBottom={1}>\n              Deseja solicitar a chave da sala {dataScreen.ModalHall}?\n              </Heading>\n              <Text  fontSize={\"md\"}>\n                  {dataScreen.ModalDescription}\n                </Text>\n\n            </Modal.Body>\n            <Modal.Footer>\n              <Button.Group space={2}>\n                <Button\n                  variant=\"ghost\"\n                  \n                  colorScheme=\"blueGray\"\n                  onPress={() => {\n                    setShowModal(false);\n                  }}\n                >\n                  Não\n                </Button>\n                <Button\n                  colorScheme={\"success\"}\n                  \n                  onPress={() => {\n                    RequestKey(dataUser.signature_digital, dataScreen.ModalHall);\n                  }}\n                >\n                  Sim\n                </Button>\n              </Button.Group>\n            </Modal.Footer>\n          </Modal.Content>\n        </Modal>\n      </Center>\n\n      <Box w={\"100%\"} bg={\"#FBFBFB\"} maxW={500} h={\"100%\"}>\n        <Box p={2} safeArea>\n          <HStack>\n            <Image\n              source={{\n                uri: \"https://pbs.twimg.com/profile_images/438771627854024704/Az4OY07a_400x400.png\",\n              }}\n              alt=\"Alternate Text\"\n              size=\"sm\"\n            />\n            <View marginLeft={\"2%\"}>\n              <Heading size={\"sm\"}>{dataUser.name}</Heading>\n              <Text fontSize={10}>{dataUser.description}</Text>\n              <Text fontSize={10} top={2}>\n                INSTITUTO FEDERAL CAMPUS PEDRO II\n              </Text>\n            </View>\n          </HStack>\n        </Box>\n        <Center top={5}>\n          <FlatList\n            w={\"95%\"}\n            maxW={350}\n            h={\"80%\"}\n            numColumns={3}\n            columnWrapperStyle={{\n              flex: 1,\n              justifyContent: \"space-around\",\n              marginLeft: 5,\n              marginBottom: 5,\n            }}\n            showsVerticalScrollIndicator={false}\n            data={dataScreen.HallList}\n            renderItem={({ item }) => (\n              <TouchableOpacity\n                onPress={() =>\n                  ModalRequestKey(\n                    item.hall,\n                    item.description,\n                    item.status,\n                    item.conveyer\n                  )\n                }\n              >\n                <Box\n                  marginBottom={1}\n                  marginTop={1}\n                  alignItems={\"center\"}\n                  bg={\"light.50\"}\n                  borderRadius={2}\n                  w={109}\n                  h={59}\n                  p={0}\n                  shadow={1}\n                >\n                  <HStack>\n                    <VStack>\n                      <Heading size={\"sm\"}>Sala</Heading>\n                      <Heading>{item.hall}</Heading>\n                    </VStack>\n                  </HStack>\n                </Box>\n              </TouchableOpacity>\n            )}\n            keyExtractor={(item) => item.id}\n          />\n        </Center>\n      </Box>\n    </NativeBaseProvider>\n  );\n}\n","import { Heading, VStack } from \"native-base\";\nimport React, { useState, useEffect } from \"react\";\nimport {View, Box, NativeBaseProvider, Text, Center} from 'native-base';\nexport default function Requests(){\n    return(\n        <NativeBaseProvider>\n            <View w={'100%'} h={'100%'}>\n                <Center w={'100%'} h={'100%'}>\n                    <Heading size={'sm'}>Em desenvolvimento</Heading>\n                    <Text>Tela: Requests</Text>\n                </Center>\n            </View>\n        </NativeBaseProvider>\n    );\n}","import { Heading, VStack } from \"native-base\";\nimport React, { useState, useEffect } from \"react\";\nimport {View, Box, NativeBaseProvider, Text, Center} from 'native-base';\nexport default function Account(){\n    return(\n        <NativeBaseProvider>\n            <View w={'100%'} h={'100%'}>\n                <Center w={'100%'} h={'100%'}>\n                    <Heading size={'sm'}>Em desenvolvimento</Heading>\n                    <Text>Tela: Account</Text>\n                </Center>\n            </View>\n        </NativeBaseProvider>\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport { Text, View, StyleSheet, Button } from \"react-native\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nimport axios from \"axios\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nexport default function LoginQR({ navigation }) {\n  const [formData, setData] = React.useState({});\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === \"granted\");\n    })();\n  }, []);\n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    const dataqr = JSON.parse(data);\n    if (dataqr.QRtoken !== undefined) {\n      LoginQRCode(dataqr.QRtoken);\n    } else {\n      alert(\"QRCode inválido\");\n    }\n  };\n  const storeData = async (value) => {\n    try {\n      const jsonValue = JSON.stringify(value);\n      await AsyncStorage.setItem(\"@data_user\", jsonValue);\n    } catch (e) {\n      console.log(\"erro ao efetuar o estado \" + e);\n    }\n  };\n\n  function LoginQRCode(value) {\n    axios\n      .get(\"https://birdra1n.x10.bz/IFPI_PORTARIA/api/user/login/\", {\n        params: {\n          method: \"QRCode\",\n          QRData: value,\n        },\n      })\n      .then(function (response) {\n        storeData(response.data);\n        \n        if (response.data.token_session !== undefined) {\n          navigation.navigate(\"Dashboard\");\n        }\n        \n      });\n  }\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <BarCodeScanner\n          onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n          style={StyleSheet.absoluteFillObject}\n        />\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignContent: \"center\",\n    alignItems: \"center\",\n  },\n  box: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n});\n","import React, { useState, useEffect } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { SSRProvider } from '@react-aria/ssr';\n\nimport Ionicons from 'react-native-vector-icons/Ionicons';\n\n//Screens\nimport Login from \"./Screens/Login\";\nimport Dashboard from \"./Screens/Dashboard\";\nimport Requests from \"./Screens/Dashboard/Requests\";\nimport Account from \"./Screens/Dashboard/Account\";\nimport LoginQR from \"./Screens/LoginQR\";\n\nconst Stack = createNativeStackNavigator();\nconst Tab = createBottomTabNavigator();\n\n\nfunction TabNavigator(){\n  return(\n    <Tab.Navigator\n    screenOptions={({ route }) => ({\n      tabBarIcon: ({ focused, color, size }) => {\n        let iconName;\n\n        if (route.name === 'Chaves') {\n          iconName = focused\n            ? 'ios-home-outline'\n            : 'ios-home-sharp';\n        } else if (route.name === 'Solicitações') {\n          iconName = focused ? 'reorder-three-sharp' : 'reorder-three-sharp';\n        } else if (route.name === 'Conta') {\n          iconName = focused ? 'person-circle-outline' : 'person-circle';\n        }\n        return <Ionicons name={iconName} size={size} color={color} />;\n      },\n      tabBarActiveTintColor: 'green',\n      tabBarInactiveTintColor: 'black',\n    })}\n  >\n    <Tab.Screen name=\"Chaves\" component={Dashboard} options={{ headerShown: false, headerTitle: 'Portaria' }} />\n    <Tab.Screen name=\"Solicitações\" component={Requests} options={{ headerShown: false, headerTitle: 'Solicitações' }} />\n    <Tab.Screen name=\"Conta\" component={Account} options={{ headerShown: false, headerTitle: 'Conta' }} />\n\n  </Tab.Navigator>\n  )\n}\n\n\n\n\nexport default function App() {\n\n  return (\n    <SSRProvider>\n      <NavigationContainer >\n        <Stack.Navigator screenOptions={{ headerShown: false }} initialRouteName={\"Login\"}>\n          <Stack.Screen name=\"Login\" component={Login} />\n          <Stack.Screen name=\"Dashboard\" component={TabNavigator} />\n          <Stack.Screen name=\"LoginQR\" component={LoginQR} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </SSRProvider>\n  );\n}\n"],"sourceRoot":""}